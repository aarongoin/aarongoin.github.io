<header>
	<h2>Ogremage</h2>
	<span>Mar 13, 2017</span>
</header>
<p>
	I've long been a fan of <a href="http://www.roguebasin.com/index.php?title=Main_Page" target="_blank">roguelike</a> games. While often graphically simple (or archaic to some) they can surprise you with their depth. They’re unforgiving. You can’t rewind. You can’t reload after death. It’s the finality of our choices that gives them weight, and this shines through in roguelikes. Ogremage is an old off-and-on side project that I started back in 2014.
</p>
<!--FOLD-->
<p>
	It started as a mad quest to create a roguelike game engine that tried to be too many things and resulted in a mountain of complexity. But I created some cool things along the way, and learned valuable lessons. And it’s not all bad. It just needs more TLC before it can shine.
</p>
<p>
	 Anyway, let’s talk about it’s good parts. The following video shows off some early successes in the project:
</p>
<video controls="true" preload="auto" src="res/2017-3-13/vid1.mp4" type="video/mp4"></video>
<p>
	Right away you might have noticed the game engine is mouse driven and does not use the keyboard. Supporting keyboard would be trivial, but my focus was on mouse and touch driven UI. The handler can detect up to 19 distinct gestures. 1, 2 and 3-finger Taps, Holds, Double-taps, Drags, and Swipes are all possible with a two-button mouse alone. Left button gestures spoof 1-fingered gestures, right button gestures spoof 2-fingered gestures, and both buttons together spoof 3-fingered gestures. Pinch and Spreading gestures are possible with the mouse as well, but they require the shift or control key on the keyboard. Using touch/mouse interaction is a departure from classic roguelikes, but this opens up play to the modern web.
</p>
<p>
	Shortly after making this video, I switched from a basic <a href="https://en.wikipedia.org/wiki/A*_search_algorithm" target="_blank">A* pathfinding</a>, to an algorithm I call Corners pathfinding. A* pathfinding is expensive--especially in JavaScript. And there are several great optimizations available. One such algorithm is <a href="https://en.wikipedia.org/wiki/Jump_point_search" target="_blank">Jump Point Search</a> (JPS). JPS is a pruning method that greatly decreases the search space of a grid-based map. I've contrived a little example map to clarify the difference. Below are two copies of a the same map. The first visualizes the A* pathfinding from the start position in the top left corner of the map to the end position in the bottom right corner. The second visualizes the same pathfinding scenario solved with JPS. The blue tiles are all the tiles the algorithm had to visit and check during pathfinding, and the yellow line is the path determined by the algorithm.
</p>
<img src="res/2017-3-13/astar_jps.png"/>
<p>
	The difference is obvious here, and indeed using JPS results in an order of magnitude speed-up in pathfinding over A*. JPS, as talked about by it's creators was a dynamic pruning method requiring jump points to be recalculated every pathfind. So I investigated preprocessing the map and caching the resulting jump points. And while doing so I discoverd a better way. Below I've taken the same map as before and colored every jump point in blue.
</p>
<img src="res/2017-3-13/jps.png"/>
<p>
	In the base map, there are 587 tiles in the search space, and our worst case pathfinding scenario will take us through all of them. Precomputing jump points results in a total of 251 tiles in the search space--reducing our search space by over 50%. Search space reduction is the name of the game in pathfinding.
</p>
<p>
	But we can still do better. In looking at this, you might notice that jump points are just tiles next to outside corners. JPS is really all about detecting these outside corners, because these corners mark the edges of obstacles. But jump points aren't the most efficient way to mark these outside corners. Below I've marked the same map with my way of marking outside corners, which I aptly call Corners.
</p>
<img src="res/2017-3-13/corners.png"/>
<p>
	Precomputing Corners results in just 154 tiles in our search space--reducing the original search space by almost 75%. This is a significant reduction, which results in a massive speed boost to pathfinding. Once these corners have been detected, they are linked together in a graph that can be traversed using the A* pathfinding algorithm.
</p>
<p>
	Below is a video of progress made later, and is fairly representative of the current capabilities of the engine.
</p>
<video controls="true" preload="auto" src="res/2017-3-13/vid2.mp4" type="video/mp4"></video>
<p>
	The most obvious non-trivial change are the characters moving all around. Each character represents a seperate creature--as is the norm for roguelike games. The "S" here is a skeleton, and the "r" is a rat. There are humans as well, which are represented as the light-yellow helmet. In the beginning area there are roughly 90 characters pathfinding around an admittedly simplistic area. Their AI is very simple: find the most-disliked enemy and go attack them, otherwise move randomly.
</p>
<p>
	Since this project aims to deliver a game engine, there must be a standardized way to code it, create custom maps, critters, items, etc. I'm using what I call Blueprints to define the map areas, the races of creatures, player details and more. These blueprints are nothing more than JavaScript literal objects, seperated from the engine and organized in a structured directory that looks like:
</p>
<img src="res/2017-3-13/dir.png"/>
<p>
	You can see there is a blueprint for skeletons, rats, humans, four areas, the console, and the player. More blueprints would be required for items and objects, but none are included in this example. A simple packing script combines all the seperate blueprints together into a single minified JavaScript module, which can be served seperately from the game engine itself. At start-up: the game engine will consume the blueprint and use it to initialize and run the game.
</p>
<p>
	Race blueprints define shared attributes, as well as unique attributes for one or more subtypes. The Rat blueprint, for example, looks like this:
</p>
<img src="res/2017-3-13/rat_bp.png"/>
<p>
	There's only one defined subtype, but you might notice that the life for the Rattus subtype is an array that defines the upper and lower bounds for the life attribute. Any numeric attribute can be defined as a range like this, and the exact value will be generated when the player enters an area. So in this case when the player enters a new area that has Rats in it: rat creatures are created, and each will have a life total between 3 and 4.
</p>
<p>
	Area blueprints define the map of the area, it's size, number of exits and where they exit to, and what Races have a foothold in this area. The blueprint for the starting area from the video looks like this:
</p>
<img src="res/2017-3-13/area_bp.png"/>
<p>
	So when the player enters the "entryway" area, 150 different Rats would be generated. If a Race has multiple subtypes, then they will be generated in numbers corresponding to the "makeup" defined in the Race blueprint. All the values in makeup should sum to 1, as these values represent a percentage. The Skeleton race has two different subtypes, with one subtype representing 90% of the total Skeleton population. So when the 50 Skeletons are generated for this area: 5 will be one subtype, and the remaining 45 will be the other.
</p>
<p>
	You may have noticed that the field of view is different in the second video. The FOV for any area is defined in it's blueprint. The engine currently has three ways of rendering FOV. PC FOV renders only the tiles within the player's line of sight out to a given radius and can be seen in the first video. In this mode, any tile that the player can't see is rendered black. Fog FOV renders the players line of sight as in PC render mode with one difference: tiles the player can't see but has seen before are rendered as a foggy tile with any occupants hidden. Fog rendering can be seen in the second video. The third option, which was not shown renders the the full canvas with no limits, and so all tiles are drawn as though the player can see them.
</p>
<p>
	Area blueprints have two different methods of generating the map, and the user is free to use either of them or both. The first method is a user-defined generator function that accepts a 2d array of empty map tiles ready to be initialized with floors, walls, and content. The second method is compressed map prefabs. Prefabs are rectangular sections of map with predefined floor and wall positions, which are compressed into a base62 representation which is approximately 14% of the maps' size. Further compression could be realized by utilizing a run-length encoding algorithm such as Word-Aligned-Hybrid to compress runs of floors and walls, while still allowing rapid unpacking with bitwise operations.
</p>
<p>
	There's more going on within the engine that I won't touch on right now. For example: the engine is using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API/Using_web_workers" target="_blank">Web Workers</a> to run all of the engine except for the console and input handling in a background thread to keep the UI performant. As I get more time, I'll post more about the other cool things going on in Ogremage. 
</p>